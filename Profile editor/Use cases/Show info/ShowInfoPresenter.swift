//
//  ShowInfoPresenter.swift
//  Profile editor
//
//  Created by Warwick McNaughton on 3/03/19.
//  Copyright (c) 2019 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowInfoPresentationLogic {
    func presentAttributedString(response: ShowInfo.Info.Response)
}

class ShowInfoPresenter: ShowInfoPresentationLogic {
    weak var viewController: ShowInfoDisplayLogic?

    // MARK: - VIP
    
    func presentAttributedString(response: ShowInfo.Info.Response) {
        
        let attString = NSMutableAttributedString()
        
        var heading1Atts = InfoAttributes().heading1
        heading1Atts[NSAttributedString.Key.paragraphStyle] = InfoParaStyle().leftWithSpacingBefore
        
        var heading2Atts = InfoAttributes().heading2
        heading2Atts[NSAttributedString.Key.paragraphStyle] = InfoParaStyle().leftWithSpacingBefore
        
        var normAtts = InfoAttributes().normal
        normAtts[NSAttributedString.Key.paragraphStyle] = InfoParaStyle().leftWithSpacingBefore
        
        var boldnormAtts = InfoAttributes().normalBold
        boldnormAtts[NSAttributedString.Key.paragraphStyle] = InfoParaStyle().leftWithSpacingBefore
        
        
        
        attString.append(NSAttributedString(string: "Quick info\n", attributes: heading1Atts))
        attString.append(NSAttributedString(string: "Enter a webid\n", attributes: heading2Atts))
 //       attString.append(NSAttributedString(string: "Remaining list:\n", attributes: boldnormAtts))
        attString.append(NSAttributedString(string: """
A webid is like:
   https://username.inrupt.net/profile/card#me
This app only handles https:// (not http://).
A webid ends with a fragment (marked by #) like #me or #i.

""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: "Features\n", attributes: heading2Atts))
        attString.append(NSAttributedString(string: """
Triples with a common subject are contained in separate table sections.
Sections can be folded so easier to navigate.
App maintains a 'recents' list to avoid having to re-type webids.
Press on a table row to examine triple format.
App tries to assess whether the object is browseable and if so a link button is enabled to load it.  This is experimental.

""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: "Limitations\n", attributes: heading2Atts))
        attString.append(NSAttributedString(string: """
When examing triple format, it is possible to edit the triple object; when Save is pressed the app will attemmpt to authenticate the user but a patched solid server is required for this
Cannot use the browser to register for an account.  
""", attributes: normAtts))
        
        let viewModel = ShowInfo.Info.ViewModel(attString: attString)
        viewController?.displayAttributedString(viewModel: viewModel) 
    }
}
