//
//  DisplayRecentsPopUpViewController.swift
//  Profile editor
//
//  Created by Warwick McNaughton on 24/02/19.
//  Copyright (c) 2019 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol DisplayRecentsPopupViewControllerDelegate: class {
    func didSelectWebIDInPopUpViewController(_ viewController: DisplayRecentsPopupViewController, webID: String)
    func didCancelPopupViewController() 
}


protocol DisplayRecentsPopupDisplayLogic: class {
    func displayRecents(viewModel: DisplayRecentsPopup.Recents.ViewModel)
}



class DisplayRecentsPopupViewController: UIViewController, DisplayRecentsPopupDisplayLogic, UITableViewDelegate, UITableViewDataSource {
    var interactor: DisplayRecentsPopupBusinessLogic?
    weak var delegate: DisplayRecentsPopupViewControllerDelegate?
    private var theToolbar: UIView?
    private var theTitleLabel: UILabel?
    private var theTableView: UITableView?
    private var recentNames: [String]?
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    
    // MARK: - Constants
    
    private let BUTTON_Y: CGFloat = 27.0
    private let BUTTON_SPACE: CGFloat = 8.0
    private let BUTTON_HEIGHT: CGFloat = 30.0
    private let TITLE_Y: CGFloat = 60
    private let TITLE_HEIGHT: CGFloat = 28.0
    private let CANCEL_BUTTON_WIDTH: CGFloat = 56.0
    private let TOOLBAR_HEIGHT: CGFloat = 100.0
    private let MAXIMUM_TABLE_WIDTH: CGFloat = 300.0
    private let MAXIMUM_TABLE_HEIGHT: CGFloat = 464.0
    private let TABLE_CELL_HEIGHT: CGFloat = 42.0
    
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = DisplayRecentsPopupInteractor()
        let presenter = DisplayRecentsPopupPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }



    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor(white:0.8, alpha:1.0)
        self.preferredContentSize = CGSize(width: MAXIMUM_TABLE_WIDTH, height: MAXIMUM_TABLE_HEIGHT)
        
        // Toolbar
        
        let viewRect = self.view.bounds
        var toolbarRect = viewRect
        toolbarRect.size.height = TOOLBAR_HEIGHT
        theToolbar = UIView(frame: toolbarRect)
        self.view.addSubview(theToolbar!)
        
//        theToolbar!.translatesAutoresizingMaskIntoConstraints = false
//        theToolbar!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
//        theToolbar!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
//        theToolbar!.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true
//        theToolbar!.heightAnchor.constraint(equalToConstant: TOOLBAR_HEIGHT).isActive = true
        
        // Cancel button
        
        let cancelButton = UIButton(type: .system)
        cancelButton.setTitle("Cancel", for: .normal)
        cancelButton.addTarget(self, action: #selector(cancelButtonPressed(_:)), for: .touchUpInside)
        cancelButton.frame = CGRect(x: 20, y: 10, width: 50, height: TITLE_HEIGHT)
        theToolbar!.addSubview(cancelButton)
        
        // Title
        
        theTitleLabel = UILabel(frame:CGRect.zero)
        theTitleLabel!.textAlignment = NSTextAlignment.center
        theTitleLabel!.font = UIFont.systemFont(ofSize: 17.0)
        theTitleLabel!.textColor = UIColor(white:0.0, alpha:1.0)
        theTitleLabel!.shadowColor = UIColor(white:0.65, alpha:1.0)
        theTitleLabel!.autoresizingMask = UIView.AutoresizingMask.flexibleWidth
        theTitleLabel!.backgroundColor = UIColor.clear
        theTitleLabel!.shadowOffset = CGSize(width: 0.0, height: 1.0)
        theTitleLabel!.text = NSLocalizedString("Recent", comment:"title")
        theToolbar!.addSubview(theTitleLabel!)

        // Autolayout of
        cancelButton.translatesAutoresizingMaskIntoConstraints = false
        cancelButton.leadingAnchor.constraint(equalTo:theToolbar!.leadingAnchor, constant: 10).isActive = true
        cancelButton.bottomAnchor.constraint(equalTo: theToolbar!.bottomAnchor, constant: -7).isActive = true
        cancelButton.widthAnchor.constraint(equalToConstant: 60).isActive = true
        cancelButton.heightAnchor.constraint(equalToConstant: TITLE_HEIGHT).isActive = true

        theTitleLabel!.translatesAutoresizingMaskIntoConstraints = false
        theTitleLabel!.centerXAnchor.constraint(equalTo: theToolbar!.centerXAnchor).isActive = true
        theTitleLabel!.bottomAnchor.constraint(equalTo: theToolbar!.bottomAnchor, constant: -7).isActive = true
        theTitleLabel!.widthAnchor.constraint(equalToConstant: 60).isActive = true
        theTitleLabel!.heightAnchor.constraint(equalToConstant: TITLE_HEIGHT).isActive = true
        
        // Table
        
        var tableRect = viewRect
        tableRect.origin.y += TOOLBAR_HEIGHT
        tableRect.size.height -= TOOLBAR_HEIGHT
        theTableView = UITableView(frame:tableRect)
        theTableView!.autoresizingMask = [UIView.AutoresizingMask.flexibleWidth, UIView.AutoresizingMask.flexibleHeight]
        theTableView!.dataSource = self
        theTableView!.delegate = self
        theTableView!.rowHeight = TABLE_CELL_HEIGHT
        self.view.addSubview(theTableView!)
        
        fetchRecents()
    }

    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        theTableView!.reloadData()
        theTableView!.contentOffset = CGPoint.zero
    }
    
    override func viewDidAppear(_ animated:Bool) {
        super.viewDidAppear(animated)
        theTableView!.flashScrollIndicators()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        theToolbar = nil
        theTitleLabel = nil
        theTableView = nil
        self.view = nil
        super.viewDidDisappear(animated)
    }
    
    // MARK: - VIP
    
    func fetchRecents() {
        let request = DisplayRecentsPopup.Recents.Request()
        interactor?.fetchRecents(request: request)
    }
    
    
    func displayRecents(viewModel: DisplayRecentsPopup.Recents.ViewModel) {
        recentNames = viewModel.recentsArray
        theTableView!.reloadData()
    }
    
    
    // MARK: - Methods
    
    func reloadData() {
        //recentNames = [String]()
        theTableView?.reloadData()
    }
    
    @objc func cancelButtonPressed(_ sender: UIButton) {
        delegate!.didCancelPopupViewController()
    }
    
    // MARK: UITableViewDelegate methods
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if true {
            let webID = recentNames![indexPath.row]
            delegate!.didSelectWebIDInPopUpViewController(self, webID: webID)
        }
    }
    
    
    
    // MARK: UITableViewDataSource methods
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: "popUpCell")
        if cell == nil {
            cell = UITableViewCell(style:UITableViewCell.CellStyle.default, reuseIdentifier:"popUpCell")
            cell!.textLabel!.font = UIFont.systemFont(ofSize: 12.0)
            cell!.textLabel!.textAlignment = NSTextAlignment.center
            cell!.selectionStyle = UITableViewCell.SelectionStyle.gray
        }
        if recentNames!.count == 0 {
            cell!.textLabel!.textColor = UIColor.lightGray
            cell!.textLabel!.text = "No recent names"
            cell?.isUserInteractionEnabled = false
        } else {
            let recentName = recentNames![(indexPath).row]
            cell!.textLabel!.textColor = UIColor.black
            cell!.textLabel!.text = recentName
            cell?.isUserInteractionEnabled = true
        }
        return cell!
    }
    
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section:Int) -> Int {
        if recentNames!.count == 0 {
            return 1
        }
        return (recentNames!.count)
    }
}
