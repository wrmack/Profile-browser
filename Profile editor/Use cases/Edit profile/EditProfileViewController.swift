//
//  EditProfileViewController.swift
//  Profile editor
//
//  Created by Warwick McNaughton on 11/02/19.
//  Copyright (c) 2019 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditProfileDisplayLogic: class {
//    func displaySomething(viewModel: EditProfile.EditTriple.ViewModel)
}



class EditProfileViewController: UIViewController, EditProfileDisplayLogic {
    var interactor: EditProfileBusinessLogic?
    var router: (NSObjectProtocol & EditProfileRoutingLogic & EditProfileDataPassing)?

    
    @IBOutlet weak var subjectLabel: UILabel!
    @IBOutlet weak var predicateLabel: UILabel!
    @IBOutlet weak var objectLabel: UILabel!
    @IBOutlet weak var objectTextField: UITextField!
    @IBOutlet weak var linkButton: UIButton!
    
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = EditProfileInteractor()
        let presenter = EditProfilePresenter()
        let router = EditProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    
    override func viewDidAppear(_ animated: Bool) {
        linkButton.isEnabled = false
        let triple  = getSelectedItem()
        subjectLabel.text = triple.subject.0
        predicateLabel.text = triple.predicate.0
        objectLabel.text = triple.object.0
        objectTextField.text = triple.object.0
        let obj = triple.object.0 as String
        if let objURL = URL(string: obj) {
            let components = URLComponents(url: objURL, resolvingAgainstBaseURL: false)
            if (components?.fragment != nil || String(components!.path.suffix(3)) == "ttl") && components?.scheme == "https" {
                if String(components!.path.suffix(3)) == "ttl" {
                    
                }
                linkButton.isEnabled = true
            }
        }
    }
    
    
    // MARK: - User actions
    
    @IBAction func saveButtonPressed(_ sender: Any) {
        saveTriple()
    }
    
    @IBAction func linkButtonPressed(_ sender: Any) {
        let webidString = objectTextField.text
        setWebidInDatastore(webid: webidString!)
        router!.showMasterViewControllerAfterSelectingLink()
    }
    
    
    // MARK: - VIP

    func saveTriple() {
        let selectedItem = getSelectedItem()
        let subject = (subjectLabel.text!, selectedItem.subject.1)
        let predicate = (predicateLabel.text!, selectedItem.predicate.1)
        let object = (objectTextField.text!, selectedItem.object.1, selectedItem.object.2)
        let triple = Triple(index: selectedItem.index, subject: subject, predicate: predicate, object: object)
        let request = EditProfile.EditTriple.Request(triple: triple)
        interactor?.saveTriple(request: request, callback: { status, error in
            if error != nil {
                self.displayAlertWithMessage(title: "Error", message: error!)
            }
            
            if status == "getTokens" {
                self.router!.navigateToAuthentication()
            }
            else if status == "success" {
                let splitViewController = UIApplication.shared.delegate?.window!!.rootViewController as! UISplitViewController
                if splitViewController.isCollapsed {
                    self.router!.showMasterViewController()
                }
            }
        })
    }
    
    // MARK: - Datastore
    
    func getSelectedItem()->Triple {
        return interactor!.getSelectedItem()
    }
    
    func setWebidInDatastore(webid: String) {
        interactor!.setWebid(webid: webid)
    }
    
    
    
    // MARK: - Alerts
    
    func displayAlertWithMessage(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Default action"), style: .default, handler: { _ in
            NSLog("The \"OK\" alert occured.")
            self.router!.returnFromAuthenticationController()
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
}
